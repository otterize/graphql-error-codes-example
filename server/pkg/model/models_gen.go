// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type DogInfo struct {
	Name     string `json:"name"`
	Breed    string `json:"breed"`
	Birthday string `json:"birthday"`
	Age      int    `json:"age"`
}

type DogInput struct {
	Name     string `json:"name"`
	Breed    string `json:"breed"`
	Birthday string `json:"birthday"`
}

type ErrorType string

const (
	ErrorTypeInternalServerError ErrorType = "InternalServerError"
	ErrorTypeNotFound            ErrorType = "NotFound"
	ErrorTypeBadRequest          ErrorType = "BadRequest"
	ErrorTypeForbidden           ErrorType = "Forbidden"
	ErrorTypeConflict            ErrorType = "Conflict"
)

var AllErrorType = []ErrorType{
	ErrorTypeInternalServerError,
	ErrorTypeNotFound,
	ErrorTypeBadRequest,
	ErrorTypeForbidden,
	ErrorTypeConflict,
}

func (e ErrorType) IsValid() bool {
	switch e {
	case ErrorTypeInternalServerError, ErrorTypeNotFound, ErrorTypeBadRequest, ErrorTypeForbidden, ErrorTypeConflict:
		return true
	}
	return false
}

func (e ErrorType) String() string {
	return string(e)
}

func (e *ErrorType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ErrorType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ErrorType", str)
	}
	return nil
}

func (e ErrorType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
