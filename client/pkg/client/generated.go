// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package client

import (
	"context"
	"encoding/json"

	"github.com/Khan/genqlient/graphql"
)

// AllDogInfo includes the GraphQL fields of DogInfo requested by the fragment AllDogInfo.
type AllDogInfo struct {
	Name     string `json:"name"`
	Breed    string `json:"breed"`
	Birthday string `json:"birthday"`
	Age      int    `json:"age"`
}

// GetName returns AllDogInfo.Name, and is useful for accessing the field via an interface.
func (v *AllDogInfo) GetName() string { return v.Name }

// GetBreed returns AllDogInfo.Breed, and is useful for accessing the field via an interface.
func (v *AllDogInfo) GetBreed() string { return v.Breed }

// GetBirthday returns AllDogInfo.Birthday, and is useful for accessing the field via an interface.
func (v *AllDogInfo) GetBirthday() string { return v.Birthday }

// GetAge returns AllDogInfo.Age, and is useful for accessing the field via an interface.
func (v *AllDogInfo) GetAge() int { return v.Age }

type DogInput struct {
	Name     string `json:"name"`
	Breed    string `json:"breed"`
	Birthday string `json:"birthday"`
}

// GetName returns DogInput.Name, and is useful for accessing the field via an interface.
func (v *DogInput) GetName() string { return v.Name }

// GetBreed returns DogInput.Breed, and is useful for accessing the field via an interface.
func (v *DogInput) GetBreed() string { return v.Breed }

// GetBirthday returns DogInput.Birthday, and is useful for accessing the field via an interface.
func (v *DogInput) GetBirthday() string { return v.Birthday }

// __addDogInput is used internally by genqlient
type __addDogInput struct {
	DogInput DogInput `json:"dogInput"`
}

// GetDogInput returns __addDogInput.DogInput, and is useful for accessing the field via an interface.
func (v *__addDogInput) GetDogInput() DogInput { return v.DogInput }

// __getDogInput is used internally by genqlient
type __getDogInput struct {
	Name     string `json:"name"`
	Password string `json:"password"`
}

// GetName returns __getDogInput.Name, and is useful for accessing the field via an interface.
func (v *__getDogInput) GetName() string { return v.Name }

// GetPassword returns __getDogInput.Password, and is useful for accessing the field via an interface.
func (v *__getDogInput) GetPassword() string { return v.Password }

// addDogResponse is returned by addDog on success.
type addDogResponse struct {
	AddDog bool `json:"addDog"`
}

// GetAddDog returns addDogResponse.AddDog, and is useful for accessing the field via an interface.
func (v *addDogResponse) GetAddDog() bool { return v.AddDog }

// getDogDogDogInfo includes the requested fields of the GraphQL type DogInfo.
type getDogDogDogInfo struct {
	AllDogInfo `json:"-"`
}

// GetName returns getDogDogDogInfo.Name, and is useful for accessing the field via an interface.
func (v *getDogDogDogInfo) GetName() string { return v.AllDogInfo.Name }

// GetBreed returns getDogDogDogInfo.Breed, and is useful for accessing the field via an interface.
func (v *getDogDogDogInfo) GetBreed() string { return v.AllDogInfo.Breed }

// GetBirthday returns getDogDogDogInfo.Birthday, and is useful for accessing the field via an interface.
func (v *getDogDogDogInfo) GetBirthday() string { return v.AllDogInfo.Birthday }

// GetAge returns getDogDogDogInfo.Age, and is useful for accessing the field via an interface.
func (v *getDogDogDogInfo) GetAge() int { return v.AllDogInfo.Age }

func (v *getDogDogDogInfo) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getDogDogDogInfo
		graphql.NoUnmarshalJSON
	}
	firstPass.getDogDogDogInfo = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllDogInfo)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalgetDogDogDogInfo struct {
	Name string `json:"name"`

	Breed string `json:"breed"`

	Birthday string `json:"birthday"`

	Age int `json:"age"`
}

func (v *getDogDogDogInfo) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getDogDogDogInfo) __premarshalJSON() (*__premarshalgetDogDogDogInfo, error) {
	var retval __premarshalgetDogDogDogInfo

	retval.Name = v.AllDogInfo.Name
	retval.Breed = v.AllDogInfo.Breed
	retval.Birthday = v.AllDogInfo.Birthday
	retval.Age = v.AllDogInfo.Age
	return &retval, nil
}

// getDogResponse is returned by getDog on success.
type getDogResponse struct {
	Dog getDogDogDogInfo `json:"dog"`
}

// GetDog returns getDogResponse.Dog, and is useful for accessing the field via an interface.
func (v *getDogResponse) GetDog() getDogDogDogInfo { return v.Dog }

func addDog(
	ctx context.Context,
	client graphql.Client,
	dogInput DogInput,
) (*addDogResponse, error) {
	req := &graphql.Request{
		OpName: "addDog",
		Query: `
mutation addDog ($dogInput: DogInput!) {
	addDog(dogInput: $dogInput)
}
`,
		Variables: &__addDogInput{
			DogInput: dogInput,
		},
	}
	var err error

	var data addDogResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func getDog(
	ctx context.Context,
	client graphql.Client,
	name string,
	password string,
) (*getDogResponse, error) {
	req := &graphql.Request{
		OpName: "getDog",
		Query: `
query getDog ($name: String!, $password: String!) {
	dog(name: $name, password: $password) {
		... AllDogInfo
	}
}
fragment AllDogInfo on DogInfo {
	name
	breed
	birthday
	age
}
`,
		Variables: &__getDogInput{
			Name:     name,
			Password: password,
		},
	}
	var err error

	var data getDogResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}
