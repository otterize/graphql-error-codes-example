// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package client

import (
	"context"

	"github.com/Khan/genqlient/graphql"
)

// __errorTypesDemoInput is used internally by genqlient
type __errorTypesDemoInput struct {
	FirstName string `json:"firstName"`
	LastName  string `json:"lastName"`
}

// GetFirstName returns __errorTypesDemoInput.FirstName, and is useful for accessing the field via an interface.
func (v *__errorTypesDemoInput) GetFirstName() string { return v.FirstName }

// GetLastName returns __errorTypesDemoInput.LastName, and is useful for accessing the field via an interface.
func (v *__errorTypesDemoInput) GetLastName() string { return v.LastName }

// errorMaskingDemoResponse is returned by errorMaskingDemo on success.
type errorMaskingDemoResponse struct {
	ErrorMaskingDemo bool `json:"errorMaskingDemo"`
}

// GetErrorMaskingDemo returns errorMaskingDemoResponse.ErrorMaskingDemo, and is useful for accessing the field via an interface.
func (v *errorMaskingDemoResponse) GetErrorMaskingDemo() bool { return v.ErrorMaskingDemo }

// errorTypesDemoResponse is returned by errorTypesDemo on success.
type errorTypesDemoResponse struct {
	ErrorTypesDemo string `json:"errorTypesDemo"`
}

// GetErrorTypesDemo returns errorTypesDemoResponse.ErrorTypesDemo, and is useful for accessing the field via an interface.
func (v *errorTypesDemoResponse) GetErrorTypesDemo() string { return v.ErrorTypesDemo }

func errorMaskingDemo(
	ctx context.Context,
	client graphql.Client,
) (*errorMaskingDemoResponse, error) {
	req := &graphql.Request{
		OpName: "errorMaskingDemo",
		Query: `
query errorMaskingDemo {
	errorMaskingDemo
}
`,
	}
	var err error

	var data errorMaskingDemoResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func errorTypesDemo(
	ctx context.Context,
	client graphql.Client,
	firstName string,
	lastName string,
) (*errorTypesDemoResponse, error) {
	req := &graphql.Request{
		OpName: "errorTypesDemo",
		Query: `
query errorTypesDemo ($firstName: String!, $lastName: String!) {
	errorTypesDemo(firstName: $firstName, lastName: $lastName)
}
`,
		Variables: &__errorTypesDemoInput{
			FirstName: firstName,
			LastName:  lastName,
		},
	}
	var err error

	var data errorTypesDemoResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}
